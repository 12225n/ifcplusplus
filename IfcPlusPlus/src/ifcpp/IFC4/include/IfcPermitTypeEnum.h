/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/IfcPPBasicTypes.h"
#include "ifcpp/model/IfcPPObject.h"
#include "ifcpp/model/IfcPPGlobal.h"

// TYPE IfcPermitTypeEnum = ENUMERATION OF	(ACCESS	,BUILDING	,WORK	,USERDEFINED	,NOTDEFINED);
class IFCPP_EXPORT IfcPermitTypeEnum : virtual public IfcPPObject
{
public:
	enum IfcPermitTypeEnumEnum
	{
		ENUM_ACCESS,
		ENUM_BUILDING,
		ENUM_WORK,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcPermitTypeEnum();
	IfcPermitTypeEnum( IfcPermitTypeEnumEnum e ) { m_enum = e; }
	~IfcPermitTypeEnum();
	virtual const char* className() const { return "IfcPermitTypeEnum"; }
	virtual shared_ptr<IfcPPObject> getDeepCopy( IfcPPCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	static shared_ptr<IfcPermitTypeEnum> createObjectFromSTEP( const std::wstring& arg, const map_t<int,shared_ptr<IfcPPEntity> >& map );
	IfcPermitTypeEnumEnum m_enum;
};

