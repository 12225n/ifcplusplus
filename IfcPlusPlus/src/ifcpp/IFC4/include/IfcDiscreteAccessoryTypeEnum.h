/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

// TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF	(ANCHORPLATE	,BRACKET	,SHOE	,EXPANSION_JOINT_DEVICE	,BIRDPROTECTION	,CABLEARRANGER	,INSULATOR	,LOCK	,TENSIONINGEQUIPMENT	,RAILPAD	,SLIDINGCHAIR	,PANEL_STRENGTHENING	,RAILBRACE	,ELASTIC_CUSHION	,SOUNDABSORPTION	,RAIL_LUBRICATION	,RAIL_MECHANICAL_EQUIPMENT	,USERDEFINED	,NOTDEFINED);
class IFCQUERY_EXPORT IfcDiscreteAccessoryTypeEnum : virtual public BuildingObject
{
public:
	enum IfcDiscreteAccessoryTypeEnumEnum
	{
		ENUM_ANCHORPLATE,
		ENUM_BRACKET,
		ENUM_SHOE,
		ENUM_EXPANSION_JOINT_DEVICE,
		ENUM_BIRDPROTECTION,
		ENUM_CABLEARRANGER,
		ENUM_INSULATOR,
		ENUM_LOCK,
		ENUM_TENSIONINGEQUIPMENT,
		ENUM_RAILPAD,
		ENUM_SLIDINGCHAIR,
		ENUM_PANEL_STRENGTHENING,
		ENUM_RAILBRACE,
		ENUM_ELASTIC_CUSHION,
		ENUM_SOUNDABSORPTION,
		ENUM_RAIL_LUBRICATION,
		ENUM_RAIL_MECHANICAL_EQUIPMENT,
		ENUM_USERDEFINED,
		ENUM_NOTDEFINED
	};

	IfcDiscreteAccessoryTypeEnum() = default;
	IfcDiscreteAccessoryTypeEnum( IfcDiscreteAccessoryTypeEnumEnum e ) { m_enum = e; }
	~IfcDiscreteAccessoryTypeEnum() = default;
	virtual const char* className() const { return "IfcDiscreteAccessoryTypeEnum"; }
	virtual shared_ptr<BuildingObject> getDeepCopy( BuildingCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcDiscreteAccessoryTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map );
	IfcDiscreteAccessoryTypeEnumEnum m_enum;
};

