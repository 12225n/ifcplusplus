/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcMooringDeviceTypeEnum.h"

// TYPE IfcMooringDeviceTypeEnum = ENUMERATION OF	(LINETENSIONER	,MAGNETICDEVICE	,MOORINGHOOKS	,VACUUMDEVICE	,BOLLARD	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcMooringDeviceTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcMooringDeviceTypeEnum> copy_self( new IfcMooringDeviceTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcMooringDeviceTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCMOORINGDEVICETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_LINETENSIONER:	stream << ".LINETENSIONER."; break;
		case ENUM_MAGNETICDEVICE:	stream << ".MAGNETICDEVICE."; break;
		case ENUM_MOORINGHOOKS:	stream << ".MOORINGHOOKS."; break;
		case ENUM_VACUUMDEVICE:	stream << ".VACUUMDEVICE."; break;
		case ENUM_BOLLARD:	stream << ".BOLLARD."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcMooringDeviceTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_LINETENSIONER:	return L"LINETENSIONER";
		case ENUM_MAGNETICDEVICE:	return L"MAGNETICDEVICE";
		case ENUM_MOORINGHOOKS:	return L"MOORINGHOOKS";
		case ENUM_VACUUMDEVICE:	return L"VACUUMDEVICE";
		case ENUM_BOLLARD:	return L"BOLLARD";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcMooringDeviceTypeEnum> IfcMooringDeviceTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcMooringDeviceTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcMooringDeviceTypeEnum>(); }
	shared_ptr<IfcMooringDeviceTypeEnum> type_object( new IfcMooringDeviceTypeEnum() );
	if( std_iequal( arg, L".LINETENSIONER." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_LINETENSIONER;
	}
	else if( std_iequal( arg, L".MAGNETICDEVICE." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_MAGNETICDEVICE;
	}
	else if( std_iequal( arg, L".MOORINGHOOKS." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_MOORINGHOOKS;
	}
	else if( std_iequal( arg, L".VACUUMDEVICE." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_VACUUMDEVICE;
	}
	else if( std_iequal( arg, L".BOLLARD." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_BOLLARD;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcMooringDeviceTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
