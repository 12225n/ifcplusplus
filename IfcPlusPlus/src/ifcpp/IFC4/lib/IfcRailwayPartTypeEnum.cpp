/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcFacilityPartTypeSelect.h"
#include "ifcpp/IFC4/include/IfcRailwayPartTypeEnum.h"

// TYPE IfcRailwayPartTypeEnum = ENUMERATION OF	(TRACKSTRUCTURE	,TRACKSTRUCTUREPART	,LINESIDESTRUCTUREPART	,DILATATIONSUPERSTRUCTURE	,PLAINTRACKSUPESTRUCTURE	,LINESIDESTRUCTURE	,SUPERSTRUCTURE	,TURNOUTSUPERSTRUCTURE	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcRailwayPartTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcRailwayPartTypeEnum> copy_self( new IfcRailwayPartTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcRailwayPartTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCRAILWAYPARTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_TRACKSTRUCTURE:	stream << ".TRACKSTRUCTURE."; break;
		case ENUM_TRACKSTRUCTUREPART:	stream << ".TRACKSTRUCTUREPART."; break;
		case ENUM_LINESIDESTRUCTUREPART:	stream << ".LINESIDESTRUCTUREPART."; break;
		case ENUM_DILATATIONSUPERSTRUCTURE:	stream << ".DILATATIONSUPERSTRUCTURE."; break;
		case ENUM_PLAINTRACKSUPESTRUCTURE:	stream << ".PLAINTRACKSUPESTRUCTURE."; break;
		case ENUM_LINESIDESTRUCTURE:	stream << ".LINESIDESTRUCTURE."; break;
		case ENUM_SUPERSTRUCTURE:	stream << ".SUPERSTRUCTURE."; break;
		case ENUM_TURNOUTSUPERSTRUCTURE:	stream << ".TURNOUTSUPERSTRUCTURE."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcRailwayPartTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_TRACKSTRUCTURE:	return L"TRACKSTRUCTURE";
		case ENUM_TRACKSTRUCTUREPART:	return L"TRACKSTRUCTUREPART";
		case ENUM_LINESIDESTRUCTUREPART:	return L"LINESIDESTRUCTUREPART";
		case ENUM_DILATATIONSUPERSTRUCTURE:	return L"DILATATIONSUPERSTRUCTURE";
		case ENUM_PLAINTRACKSUPESTRUCTURE:	return L"PLAINTRACKSUPESTRUCTURE";
		case ENUM_LINESIDESTRUCTURE:	return L"LINESIDESTRUCTURE";
		case ENUM_SUPERSTRUCTURE:	return L"SUPERSTRUCTURE";
		case ENUM_TURNOUTSUPERSTRUCTURE:	return L"TURNOUTSUPERSTRUCTURE";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcRailwayPartTypeEnum> IfcRailwayPartTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcRailwayPartTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcRailwayPartTypeEnum>(); }
	shared_ptr<IfcRailwayPartTypeEnum> type_object( new IfcRailwayPartTypeEnum() );
	if( std_iequal( arg, L".TRACKSTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_TRACKSTRUCTURE;
	}
	else if( std_iequal( arg, L".TRACKSTRUCTUREPART." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_TRACKSTRUCTUREPART;
	}
	else if( std_iequal( arg, L".LINESIDESTRUCTUREPART." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_LINESIDESTRUCTUREPART;
	}
	else if( std_iequal( arg, L".DILATATIONSUPERSTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_DILATATIONSUPERSTRUCTURE;
	}
	else if( std_iequal( arg, L".PLAINTRACKSUPESTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_PLAINTRACKSUPESTRUCTURE;
	}
	else if( std_iequal( arg, L".LINESIDESTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_LINESIDESTRUCTURE;
	}
	else if( std_iequal( arg, L".SUPERSTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_SUPERSTRUCTURE;
	}
	else if( std_iequal( arg, L".TURNOUTSUPERSTRUCTURE." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_TURNOUTSUPERSTRUCTURE;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcRailwayPartTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
