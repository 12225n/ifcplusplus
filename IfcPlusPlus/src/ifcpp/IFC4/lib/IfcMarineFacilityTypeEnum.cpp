/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcMarineFacilityTypeEnum.h"

// TYPE IfcMarineFacilityTypeEnum = ENUMERATION OF	(CANAL	,WATERWAYSHIPLIFT	,EMBANKMENT	,LAUNCHRECOVERY	,MARINEDEFENCE	,HYDROLIFT	,SHIPYARD	,SHIPLIFT	,PORT	,QUAY	,FLOATINGDOCK	,NAVIGATIONALCHANNEL	,BREAKWATER	,DRYDOCK	,JETTY	,SHIPLOCK	,BARRIERBEACH	,SLIPWAY	,WATERWAY	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcMarineFacilityTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcMarineFacilityTypeEnum> copy_self( new IfcMarineFacilityTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcMarineFacilityTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCMARINEFACILITYTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CANAL:	stream << ".CANAL."; break;
		case ENUM_WATERWAYSHIPLIFT:	stream << ".WATERWAYSHIPLIFT."; break;
		case ENUM_EMBANKMENT:	stream << ".EMBANKMENT."; break;
		case ENUM_LAUNCHRECOVERY:	stream << ".LAUNCHRECOVERY."; break;
		case ENUM_MARINEDEFENCE:	stream << ".MARINEDEFENCE."; break;
		case ENUM_HYDROLIFT:	stream << ".HYDROLIFT."; break;
		case ENUM_SHIPYARD:	stream << ".SHIPYARD."; break;
		case ENUM_SHIPLIFT:	stream << ".SHIPLIFT."; break;
		case ENUM_PORT:	stream << ".PORT."; break;
		case ENUM_QUAY:	stream << ".QUAY."; break;
		case ENUM_FLOATINGDOCK:	stream << ".FLOATINGDOCK."; break;
		case ENUM_NAVIGATIONALCHANNEL:	stream << ".NAVIGATIONALCHANNEL."; break;
		case ENUM_BREAKWATER:	stream << ".BREAKWATER."; break;
		case ENUM_DRYDOCK:	stream << ".DRYDOCK."; break;
		case ENUM_JETTY:	stream << ".JETTY."; break;
		case ENUM_SHIPLOCK:	stream << ".SHIPLOCK."; break;
		case ENUM_BARRIERBEACH:	stream << ".BARRIERBEACH."; break;
		case ENUM_SLIPWAY:	stream << ".SLIPWAY."; break;
		case ENUM_WATERWAY:	stream << ".WATERWAY."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcMarineFacilityTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_CANAL:	return L"CANAL";
		case ENUM_WATERWAYSHIPLIFT:	return L"WATERWAYSHIPLIFT";
		case ENUM_EMBANKMENT:	return L"EMBANKMENT";
		case ENUM_LAUNCHRECOVERY:	return L"LAUNCHRECOVERY";
		case ENUM_MARINEDEFENCE:	return L"MARINEDEFENCE";
		case ENUM_HYDROLIFT:	return L"HYDROLIFT";
		case ENUM_SHIPYARD:	return L"SHIPYARD";
		case ENUM_SHIPLIFT:	return L"SHIPLIFT";
		case ENUM_PORT:	return L"PORT";
		case ENUM_QUAY:	return L"QUAY";
		case ENUM_FLOATINGDOCK:	return L"FLOATINGDOCK";
		case ENUM_NAVIGATIONALCHANNEL:	return L"NAVIGATIONALCHANNEL";
		case ENUM_BREAKWATER:	return L"BREAKWATER";
		case ENUM_DRYDOCK:	return L"DRYDOCK";
		case ENUM_JETTY:	return L"JETTY";
		case ENUM_SHIPLOCK:	return L"SHIPLOCK";
		case ENUM_BARRIERBEACH:	return L"BARRIERBEACH";
		case ENUM_SLIPWAY:	return L"SLIPWAY";
		case ENUM_WATERWAY:	return L"WATERWAY";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcMarineFacilityTypeEnum> IfcMarineFacilityTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcMarineFacilityTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcMarineFacilityTypeEnum>(); }
	shared_ptr<IfcMarineFacilityTypeEnum> type_object( new IfcMarineFacilityTypeEnum() );
	if( std_iequal( arg, L".CANAL." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_CANAL;
	}
	else if( std_iequal( arg, L".WATERWAYSHIPLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_WATERWAYSHIPLIFT;
	}
	else if( std_iequal( arg, L".EMBANKMENT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_EMBANKMENT;
	}
	else if( std_iequal( arg, L".LAUNCHRECOVERY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_LAUNCHRECOVERY;
	}
	else if( std_iequal( arg, L".MARINEDEFENCE." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_MARINEDEFENCE;
	}
	else if( std_iequal( arg, L".HYDROLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_HYDROLIFT;
	}
	else if( std_iequal( arg, L".SHIPYARD." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPYARD;
	}
	else if( std_iequal( arg, L".SHIPLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPLIFT;
	}
	else if( std_iequal( arg, L".PORT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_PORT;
	}
	else if( std_iequal( arg, L".QUAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_QUAY;
	}
	else if( std_iequal( arg, L".FLOATINGDOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_FLOATINGDOCK;
	}
	else if( std_iequal( arg, L".NAVIGATIONALCHANNEL." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_NAVIGATIONALCHANNEL;
	}
	else if( std_iequal( arg, L".BREAKWATER." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_BREAKWATER;
	}
	else if( std_iequal( arg, L".DRYDOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_DRYDOCK;
	}
	else if( std_iequal( arg, L".JETTY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_JETTY;
	}
	else if( std_iequal( arg, L".SHIPLOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPLOCK;
	}
	else if( std_iequal( arg, L".BARRIERBEACH." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_BARRIERBEACH;
	}
	else if( std_iequal( arg, L".SLIPWAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SLIPWAY;
	}
	else if( std_iequal( arg, L".WATERWAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_WATERWAY;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
