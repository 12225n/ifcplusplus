/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcBuiltSystemTypeEnum.h"

// TYPE IfcBuiltSystemTypeEnum = ENUMERATION OF	(REINFORCING	,MOORING	,OUTERSHELL	,TRACKCIRCUIT	,EROSIONPREVENTION	,FOUNDATION	,LOADBEARING	,SHADING	,FENESTRATION	,MOORINGSYSTEM	,TRANSPORT	,PRESTRESSING	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcBuiltSystemTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcBuiltSystemTypeEnum> copy_self( new IfcBuiltSystemTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcBuiltSystemTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCBUILTSYSTEMTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_REINFORCING:	stream << ".REINFORCING."; break;
		case ENUM_MOORING:	stream << ".MOORING."; break;
		case ENUM_OUTERSHELL:	stream << ".OUTERSHELL."; break;
		case ENUM_TRACKCIRCUIT:	stream << ".TRACKCIRCUIT."; break;
		case ENUM_EROSIONPREVENTION:	stream << ".EROSIONPREVENTION."; break;
		case ENUM_FOUNDATION:	stream << ".FOUNDATION."; break;
		case ENUM_LOADBEARING:	stream << ".LOADBEARING."; break;
		case ENUM_SHADING:	stream << ".SHADING."; break;
		case ENUM_FENESTRATION:	stream << ".FENESTRATION."; break;
		case ENUM_MOORINGSYSTEM:	stream << ".MOORINGSYSTEM."; break;
		case ENUM_TRANSPORT:	stream << ".TRANSPORT."; break;
		case ENUM_PRESTRESSING:	stream << ".PRESTRESSING."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcBuiltSystemTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_REINFORCING:	return L"REINFORCING";
		case ENUM_MOORING:	return L"MOORING";
		case ENUM_OUTERSHELL:	return L"OUTERSHELL";
		case ENUM_TRACKCIRCUIT:	return L"TRACKCIRCUIT";
		case ENUM_EROSIONPREVENTION:	return L"EROSIONPREVENTION";
		case ENUM_FOUNDATION:	return L"FOUNDATION";
		case ENUM_LOADBEARING:	return L"LOADBEARING";
		case ENUM_SHADING:	return L"SHADING";
		case ENUM_FENESTRATION:	return L"FENESTRATION";
		case ENUM_MOORINGSYSTEM:	return L"MOORINGSYSTEM";
		case ENUM_TRANSPORT:	return L"TRANSPORT";
		case ENUM_PRESTRESSING:	return L"PRESTRESSING";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcBuiltSystemTypeEnum> IfcBuiltSystemTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcBuiltSystemTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcBuiltSystemTypeEnum>(); }
	shared_ptr<IfcBuiltSystemTypeEnum> type_object( new IfcBuiltSystemTypeEnum() );
	if( std_iequal( arg, L".REINFORCING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_REINFORCING;
	}
	else if( std_iequal( arg, L".MOORING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_MOORING;
	}
	else if( std_iequal( arg, L".OUTERSHELL." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_OUTERSHELL;
	}
	else if( std_iequal( arg, L".TRACKCIRCUIT." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_TRACKCIRCUIT;
	}
	else if( std_iequal( arg, L".EROSIONPREVENTION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_EROSIONPREVENTION;
	}
	else if( std_iequal( arg, L".FOUNDATION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_FOUNDATION;
	}
	else if( std_iequal( arg, L".LOADBEARING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_LOADBEARING;
	}
	else if( std_iequal( arg, L".SHADING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_SHADING;
	}
	else if( std_iequal( arg, L".FENESTRATION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_FENESTRATION;
	}
	else if( std_iequal( arg, L".MOORINGSYSTEM." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_MOORINGSYSTEM;
	}
	else if( std_iequal( arg, L".TRANSPORT." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_TRANSPORT;
	}
	else if( std_iequal( arg, L".PRESTRESSING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_PRESTRESSING;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
