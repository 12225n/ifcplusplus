/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcBearingTypeEnum.h"

// TYPE IfcBearingTypeEnum = ENUMERATION OF	(CYLINDRICAL	,SPHERICAL	,ELASTOMERIC	,POT	,GUIDE	,ROCKER	,ROLLER	,DISK	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcBearingTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcBearingTypeEnum> copy_self( new IfcBearingTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcBearingTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCBEARINGTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CYLINDRICAL:	stream << ".CYLINDRICAL."; break;
		case ENUM_SPHERICAL:	stream << ".SPHERICAL."; break;
		case ENUM_ELASTOMERIC:	stream << ".ELASTOMERIC."; break;
		case ENUM_POT:	stream << ".POT."; break;
		case ENUM_GUIDE:	stream << ".GUIDE."; break;
		case ENUM_ROCKER:	stream << ".ROCKER."; break;
		case ENUM_ROLLER:	stream << ".ROLLER."; break;
		case ENUM_DISK:	stream << ".DISK."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcBearingTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_CYLINDRICAL:	return L"CYLINDRICAL";
		case ENUM_SPHERICAL:	return L"SPHERICAL";
		case ENUM_ELASTOMERIC:	return L"ELASTOMERIC";
		case ENUM_POT:	return L"POT";
		case ENUM_GUIDE:	return L"GUIDE";
		case ENUM_ROCKER:	return L"ROCKER";
		case ENUM_ROLLER:	return L"ROLLER";
		case ENUM_DISK:	return L"DISK";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcBearingTypeEnum> IfcBearingTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcBearingTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcBearingTypeEnum>(); }
	shared_ptr<IfcBearingTypeEnum> type_object( new IfcBearingTypeEnum() );
	if( std_iequal( arg, L".CYLINDRICAL." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_CYLINDRICAL;
	}
	else if( std_iequal( arg, L".SPHERICAL." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_SPHERICAL;
	}
	else if( std_iequal( arg, L".ELASTOMERIC." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_ELASTOMERIC;
	}
	else if( std_iequal( arg, L".POT." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_POT;
	}
	else if( std_iequal( arg, L".GUIDE." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_GUIDE;
	}
	else if( std_iequal( arg, L".ROCKER." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_ROCKER;
	}
	else if( std_iequal( arg, L".ROLLER." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_ROLLER;
	}
	else if( std_iequal( arg, L".DISK." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_DISK;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBearingTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
