/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcReinforcedSoilTypeEnum.h"

// TYPE IfcReinforcedSoilTypeEnum = ENUMERATION OF	(SURCHARGEPRELOADED	,VERTICALLYDRAINED	,DYNAMICALLYCOMPACTED	,REPLACED	,ROLLERCOMPACTED	,GROUTED	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcReinforcedSoilTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcReinforcedSoilTypeEnum> copy_self( new IfcReinforcedSoilTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcReinforcedSoilTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCREINFORCEDSOILTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_SURCHARGEPRELOADED:	stream << ".SURCHARGEPRELOADED."; break;
		case ENUM_VERTICALLYDRAINED:	stream << ".VERTICALLYDRAINED."; break;
		case ENUM_DYNAMICALLYCOMPACTED:	stream << ".DYNAMICALLYCOMPACTED."; break;
		case ENUM_REPLACED:	stream << ".REPLACED."; break;
		case ENUM_ROLLERCOMPACTED:	stream << ".ROLLERCOMPACTED."; break;
		case ENUM_GROUTED:	stream << ".GROUTED."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcReinforcedSoilTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_SURCHARGEPRELOADED:	return L"SURCHARGEPRELOADED";
		case ENUM_VERTICALLYDRAINED:	return L"VERTICALLYDRAINED";
		case ENUM_DYNAMICALLYCOMPACTED:	return L"DYNAMICALLYCOMPACTED";
		case ENUM_REPLACED:	return L"REPLACED";
		case ENUM_ROLLERCOMPACTED:	return L"ROLLERCOMPACTED";
		case ENUM_GROUTED:	return L"GROUTED";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcReinforcedSoilTypeEnum> IfcReinforcedSoilTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcReinforcedSoilTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcReinforcedSoilTypeEnum>(); }
	shared_ptr<IfcReinforcedSoilTypeEnum> type_object( new IfcReinforcedSoilTypeEnum() );
	if( std_iequal( arg, L".SURCHARGEPRELOADED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_SURCHARGEPRELOADED;
	}
	else if( std_iequal( arg, L".VERTICALLYDRAINED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_VERTICALLYDRAINED;
	}
	else if( std_iequal( arg, L".DYNAMICALLYCOMPACTED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_DYNAMICALLYCOMPACTED;
	}
	else if( std_iequal( arg, L".REPLACED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_REPLACED;
	}
	else if( std_iequal( arg, L".ROLLERCOMPACTED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_ROLLERCOMPACTED;
	}
	else if( std_iequal( arg, L".GROUTED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_GROUTED;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcReinforcedSoilTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
