/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcAxisLateralInclination.h"
#include "ifcpp/IFC4/include/IfcCurve.h"
#include "ifcpp/IFC4/include/IfcLinearAxisWithInclination.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcLinearAxisWithInclination 
IfcLinearAxisWithInclination::IfcLinearAxisWithInclination( int id ) { m_entity_id = id; }
shared_ptr<BuildingObject> IfcLinearAxisWithInclination::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcLinearAxisWithInclination> copy_self( new IfcLinearAxisWithInclination() );
	if( m_Directrix ) { copy_self->m_Directrix = dynamic_pointer_cast<IfcCurve>( m_Directrix->getDeepCopy(options) ); }
	if( m_Inclinating ) { copy_self->m_Inclinating = dynamic_pointer_cast<IfcAxisLateralInclination>( m_Inclinating->getDeepCopy(options) ); }
	return copy_self;
}
void IfcLinearAxisWithInclination::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCLINEARAXISWITHINCLINATION" << "(";
	if( m_Directrix ) { stream << "#" << m_Directrix->m_entity_id; } else { stream << "$"; }
	stream << ",";
	if( m_Inclinating ) { stream << "#" << m_Inclinating->m_entity_id; } else { stream << "$"; }
	stream << ");";
}
void IfcLinearAxisWithInclination::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_entity_id; }
const std::wstring IfcLinearAxisWithInclination::toString() const { return L"IfcLinearAxisWithInclination"; }
void IfcLinearAxisWithInclination::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 2 ){ std::stringstream err; err << "Wrong parameter count for entity IfcLinearAxisWithInclination, expecting 2, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_Directrix, map );
	readEntityReference( args[1], m_Inclinating, map );
}
void IfcLinearAxisWithInclination::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcGeometricRepresentationItem::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Directrix", m_Directrix ) );
	vec_attributes.emplace_back( std::make_pair( "Inclinating", m_Inclinating ) );
}
void IfcLinearAxisWithInclination::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcGeometricRepresentationItem::getAttributesInverse( vec_attributes_inverse );
}
void IfcLinearAxisWithInclination::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcGeometricRepresentationItem::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcLinearAxisWithInclination> ptr_self = dynamic_pointer_cast<IfcLinearAxisWithInclination>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcLinearAxisWithInclination::setInverseCounterparts: type mismatch" ); }
	if( m_Inclinating )
	{
		m_Inclinating->m_ToLinearAxis_inverse.emplace_back( ptr_self );
	}
}
void IfcLinearAxisWithInclination::unlinkFromInverseCounterparts()
{
	IfcGeometricRepresentationItem::unlinkFromInverseCounterparts();
	if( m_Inclinating )
	{
		std::vector<weak_ptr<IfcLinearAxisWithInclination> >& ToLinearAxis_inverse = m_Inclinating->m_ToLinearAxis_inverse;
		for( auto it_ToLinearAxis_inverse = ToLinearAxis_inverse.begin(); it_ToLinearAxis_inverse != ToLinearAxis_inverse.end(); )
		{
			weak_ptr<IfcLinearAxisWithInclination> self_candidate_weak = *it_ToLinearAxis_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_ToLinearAxis_inverse;
				continue;
			}
			shared_ptr<IfcLinearAxisWithInclination> self_candidate( *it_ToLinearAxis_inverse );
			if( self_candidate.get() == this )
			{
				it_ToLinearAxis_inverse= ToLinearAxis_inverse.erase( it_ToLinearAxis_inverse );
			}
			else
			{
				++it_ToLinearAxis_inverse;
			}
		}
	}
}
