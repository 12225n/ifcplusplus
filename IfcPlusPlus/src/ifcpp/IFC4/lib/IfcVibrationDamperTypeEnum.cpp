/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcImpactProtectionDeviceTypeSelect.h"
#include "ifcpp/IFC4/include/IfcVibrationDamperTypeEnum.h"

// TYPE IfcVibrationDamperTypeEnum = ENUMERATION OF	(BENDING_YIELD	,SHEAR_YIELD	,AXIAL_YIELD	,FRICTION	,VISCOUS	,RUBBER	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcVibrationDamperTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcVibrationDamperTypeEnum> copy_self( new IfcVibrationDamperTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcVibrationDamperTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCVIBRATIONDAMPERTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BENDING_YIELD:	stream << ".BENDING_YIELD."; break;
		case ENUM_SHEAR_YIELD:	stream << ".SHEAR_YIELD."; break;
		case ENUM_AXIAL_YIELD:	stream << ".AXIAL_YIELD."; break;
		case ENUM_FRICTION:	stream << ".FRICTION."; break;
		case ENUM_VISCOUS:	stream << ".VISCOUS."; break;
		case ENUM_RUBBER:	stream << ".RUBBER."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcVibrationDamperTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_BENDING_YIELD:	return L"BENDING_YIELD";
		case ENUM_SHEAR_YIELD:	return L"SHEAR_YIELD";
		case ENUM_AXIAL_YIELD:	return L"AXIAL_YIELD";
		case ENUM_FRICTION:	return L"FRICTION";
		case ENUM_VISCOUS:	return L"VISCOUS";
		case ENUM_RUBBER:	return L"RUBBER";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcVibrationDamperTypeEnum> IfcVibrationDamperTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcVibrationDamperTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcVibrationDamperTypeEnum>(); }
	shared_ptr<IfcVibrationDamperTypeEnum> type_object( new IfcVibrationDamperTypeEnum() );
	if( std_iequal( arg, L".BENDING_YIELD." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_BENDING_YIELD;
	}
	else if( std_iequal( arg, L".SHEAR_YIELD." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_SHEAR_YIELD;
	}
	else if( std_iequal( arg, L".AXIAL_YIELD." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_AXIAL_YIELD;
	}
	else if( std_iequal( arg, L".FRICTION." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_FRICTION;
	}
	else if( std_iequal( arg, L".VISCOUS." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_VISCOUS;
	}
	else if( std_iequal( arg, L".RUBBER." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_RUBBER;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcVibrationDamperTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
