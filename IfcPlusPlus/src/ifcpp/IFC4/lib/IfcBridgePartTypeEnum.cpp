/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcFacilityPartTypeSelect.h"
#include "ifcpp/IFC4/include/IfcBridgePartTypeEnum.h"

// TYPE IfcBridgePartTypeEnum = ENUMERATION OF	(ABUTMENT	,DECK	,DECK_SEGMENT	,FOUNDATION	,PIER	,PIER_SEGMENT	,PYLON	,SUBSTRUCTURE	,SUPERSTRUCTURE	,SURFACESTRUCTURE	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcBridgePartTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcBridgePartTypeEnum> copy_self( new IfcBridgePartTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcBridgePartTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCBRIDGEPARTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ABUTMENT:	stream << ".ABUTMENT."; break;
		case ENUM_DECK:	stream << ".DECK."; break;
		case ENUM_DECK_SEGMENT:	stream << ".DECK_SEGMENT."; break;
		case ENUM_FOUNDATION:	stream << ".FOUNDATION."; break;
		case ENUM_PIER:	stream << ".PIER."; break;
		case ENUM_PIER_SEGMENT:	stream << ".PIER_SEGMENT."; break;
		case ENUM_PYLON:	stream << ".PYLON."; break;
		case ENUM_SUBSTRUCTURE:	stream << ".SUBSTRUCTURE."; break;
		case ENUM_SUPERSTRUCTURE:	stream << ".SUPERSTRUCTURE."; break;
		case ENUM_SURFACESTRUCTURE:	stream << ".SURFACESTRUCTURE."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcBridgePartTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_ABUTMENT:	return L"ABUTMENT";
		case ENUM_DECK:	return L"DECK";
		case ENUM_DECK_SEGMENT:	return L"DECK_SEGMENT";
		case ENUM_FOUNDATION:	return L"FOUNDATION";
		case ENUM_PIER:	return L"PIER";
		case ENUM_PIER_SEGMENT:	return L"PIER_SEGMENT";
		case ENUM_PYLON:	return L"PYLON";
		case ENUM_SUBSTRUCTURE:	return L"SUBSTRUCTURE";
		case ENUM_SUPERSTRUCTURE:	return L"SUPERSTRUCTURE";
		case ENUM_SURFACESTRUCTURE:	return L"SURFACESTRUCTURE";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcBridgePartTypeEnum> IfcBridgePartTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcBridgePartTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcBridgePartTypeEnum>(); }
	shared_ptr<IfcBridgePartTypeEnum> type_object( new IfcBridgePartTypeEnum() );
	if( std_iequal( arg, L".ABUTMENT." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_ABUTMENT;
	}
	else if( std_iequal( arg, L".DECK." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_DECK;
	}
	else if( std_iequal( arg, L".DECK_SEGMENT." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_DECK_SEGMENT;
	}
	else if( std_iequal( arg, L".FOUNDATION." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_FOUNDATION;
	}
	else if( std_iequal( arg, L".PIER." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_PIER;
	}
	else if( std_iequal( arg, L".PIER_SEGMENT." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_PIER_SEGMENT;
	}
	else if( std_iequal( arg, L".PYLON." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_PYLON;
	}
	else if( std_iequal( arg, L".SUBSTRUCTURE." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_SUBSTRUCTURE;
	}
	else if( std_iequal( arg, L".SUPERSTRUCTURE." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_SUPERSTRUCTURE;
	}
	else if( std_iequal( arg, L".SURFACESTRUCTURE." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_SURFACESTRUCTURE;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBridgePartTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
