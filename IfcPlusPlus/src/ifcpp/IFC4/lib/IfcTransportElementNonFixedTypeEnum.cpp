/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcTransportElementTypeSelect.h"
#include "ifcpp/IFC4/include/IfcTransportElementNonFixedTypeEnum.h"

// TYPE IfcTransportElementNonFixedTypeEnum = ENUMERATION OF	(VEHICLE	,VEHICLETRACKED	,ROLLINGSTOCK	,VEHICLEWHEELED	,VEHICLEAIR	,CARGO	,VEHICLEMARINE	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcTransportElementNonFixedTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcTransportElementNonFixedTypeEnum> copy_self( new IfcTransportElementNonFixedTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcTransportElementNonFixedTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCTRANSPORTELEMENTNONFIXEDTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_VEHICLE:	stream << ".VEHICLE."; break;
		case ENUM_VEHICLETRACKED:	stream << ".VEHICLETRACKED."; break;
		case ENUM_ROLLINGSTOCK:	stream << ".ROLLINGSTOCK."; break;
		case ENUM_VEHICLEWHEELED:	stream << ".VEHICLEWHEELED."; break;
		case ENUM_VEHICLEAIR:	stream << ".VEHICLEAIR."; break;
		case ENUM_CARGO:	stream << ".CARGO."; break;
		case ENUM_VEHICLEMARINE:	stream << ".VEHICLEMARINE."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcTransportElementNonFixedTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_VEHICLE:	return L"VEHICLE";
		case ENUM_VEHICLETRACKED:	return L"VEHICLETRACKED";
		case ENUM_ROLLINGSTOCK:	return L"ROLLINGSTOCK";
		case ENUM_VEHICLEWHEELED:	return L"VEHICLEWHEELED";
		case ENUM_VEHICLEAIR:	return L"VEHICLEAIR";
		case ENUM_CARGO:	return L"CARGO";
		case ENUM_VEHICLEMARINE:	return L"VEHICLEMARINE";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcTransportElementNonFixedTypeEnum> IfcTransportElementNonFixedTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcTransportElementNonFixedTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcTransportElementNonFixedTypeEnum>(); }
	shared_ptr<IfcTransportElementNonFixedTypeEnum> type_object( new IfcTransportElementNonFixedTypeEnum() );
	if( std_iequal( arg, L".VEHICLE." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_VEHICLE;
	}
	else if( std_iequal( arg, L".VEHICLETRACKED." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_VEHICLETRACKED;
	}
	else if( std_iequal( arg, L".ROLLINGSTOCK." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_ROLLINGSTOCK;
	}
	else if( std_iequal( arg, L".VEHICLEWHEELED." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_VEHICLEWHEELED;
	}
	else if( std_iequal( arg, L".VEHICLEAIR." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_VEHICLEAIR;
	}
	else if( std_iequal( arg, L".CARGO." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_CARGO;
	}
	else if( std_iequal( arg, L".VEHICLEMARINE." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_VEHICLEMARINE;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcTransportElementNonFixedTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
