/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcAxisLateralInclination.h"
#include "ifcpp/IFC4/include/IfcLinearAxisWithInclination.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcAxisLateralInclination 
IfcAxisLateralInclination::IfcAxisLateralInclination( int id ) { m_entity_id = id; }
shared_ptr<BuildingObject> IfcAxisLateralInclination::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcAxisLateralInclination> copy_self( new IfcAxisLateralInclination() );
	return copy_self;
}
void IfcAxisLateralInclination::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCAXISLATERALINCLINATION" << "(";
	stream << ");";
}
void IfcAxisLateralInclination::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_entity_id; }
const std::wstring IfcAxisLateralInclination::toString() const { return L"IfcAxisLateralInclination"; }
void IfcAxisLateralInclination::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
}
void IfcAxisLateralInclination::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcGeometricRepresentationItem::getAttributes( vec_attributes );
}
void IfcAxisLateralInclination::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcGeometricRepresentationItem::getAttributesInverse( vec_attributes_inverse );
	if( !m_ToLinearAxis_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> ToLinearAxis_inverse_vec_obj( new AttributeObjectVector() );
		for( size_t i=0; i<m_ToLinearAxis_inverse.size(); ++i )
		{
			if( !m_ToLinearAxis_inverse[i].expired() )
			{
				ToLinearAxis_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcLinearAxisWithInclination>( m_ToLinearAxis_inverse[i] ) );
			}
		}
		vec_attributes_inverse.emplace_back( std::make_pair( "ToLinearAxis_inverse", ToLinearAxis_inverse_vec_obj ) );
	}
}
void IfcAxisLateralInclination::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcGeometricRepresentationItem::setInverseCounterparts( ptr_self_entity );
}
void IfcAxisLateralInclination::unlinkFromInverseCounterparts()
{
	IfcGeometricRepresentationItem::unlinkFromInverseCounterparts();
}
