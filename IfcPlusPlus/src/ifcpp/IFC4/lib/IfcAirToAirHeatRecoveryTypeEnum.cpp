/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/IfcPPBasicTypes.h"
#include "ifcpp/model/IfcPPException.h"
#include "ifcpp/IFC4/include/IfcAirToAirHeatRecoveryTypeEnum.h"

// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF	(FIXEDPLATECOUNTERFLOWEXCHANGER	,FIXEDPLATECROSSFLOWEXCHANGER	,FIXEDPLATEPARALLELFLOWEXCHANGER	,ROTARYWHEEL	,RUNAROUNDCOILLOOP	,HEATPIPE	,TWINTOWERENTHALPYRECOVERYLOOPS	,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS	,THERMOSIPHONCOILTYPEHEATEXCHANGERS	,USERDEFINED	,NOTDEFINED);
IfcAirToAirHeatRecoveryTypeEnum::IfcAirToAirHeatRecoveryTypeEnum() {}
IfcAirToAirHeatRecoveryTypeEnum::~IfcAirToAirHeatRecoveryTypeEnum() {}
shared_ptr<IfcPPObject> IfcAirToAirHeatRecoveryTypeEnum::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcAirToAirHeatRecoveryTypeEnum> copy_self( new IfcAirToAirHeatRecoveryTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcAirToAirHeatRecoveryTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCAIRTOAIRHEATRECOVERYTYPEENUM("; }
	if( m_enum == ENUM_FIXEDPLATECOUNTERFLOWEXCHANGER )
	{
		stream << ".FIXEDPLATECOUNTERFLOWEXCHANGER.";
	}
	else if( m_enum == ENUM_FIXEDPLATECROSSFLOWEXCHANGER )
	{
		stream << ".FIXEDPLATECROSSFLOWEXCHANGER.";
	}
	else if( m_enum == ENUM_FIXEDPLATEPARALLELFLOWEXCHANGER )
	{
		stream << ".FIXEDPLATEPARALLELFLOWEXCHANGER.";
	}
	else if( m_enum == ENUM_ROTARYWHEEL )
	{
		stream << ".ROTARYWHEEL.";
	}
	else if( m_enum == ENUM_RUNAROUNDCOILLOOP )
	{
		stream << ".RUNAROUNDCOILLOOP.";
	}
	else if( m_enum == ENUM_HEATPIPE )
	{
		stream << ".HEATPIPE.";
	}
	else if( m_enum == ENUM_TWINTOWERENTHALPYRECOVERYLOOPS )
	{
		stream << ".TWINTOWERENTHALPYRECOVERYLOOPS.";
	}
	else if( m_enum == ENUM_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS )
	{
		stream << ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS.";
	}
	else if( m_enum == ENUM_THERMOSIPHONCOILTYPEHEATEXCHANGERS )
	{
		stream << ".THERMOSIPHONCOILTYPEHEATEXCHANGERS.";
	}
	else if( m_enum == ENUM_USERDEFINED )
	{
		stream << ".USERDEFINED.";
	}
	else if( m_enum == ENUM_NOTDEFINED )
	{
		stream << ".NOTDEFINED.";
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IfcAirToAirHeatRecoveryTypeEnum> IfcAirToAirHeatRecoveryTypeEnum::createObjectFromSTEP( const std::wstring& arg, const map_t<int,shared_ptr<IfcPPEntity> >& map )
{
	// read TYPE
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcAirToAirHeatRecoveryTypeEnum>(); }
	else if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcAirToAirHeatRecoveryTypeEnum>(); }
	shared_ptr<IfcAirToAirHeatRecoveryTypeEnum> type_object( new IfcAirToAirHeatRecoveryTypeEnum() );
	if( boost::iequals( arg, L".FIXEDPLATECOUNTERFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATECOUNTERFLOWEXCHANGER;
	}
	else if( boost::iequals( arg, L".FIXEDPLATECROSSFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATECROSSFLOWEXCHANGER;
	}
	else if( boost::iequals( arg, L".FIXEDPLATEPARALLELFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATEPARALLELFLOWEXCHANGER;
	}
	else if( boost::iequals( arg, L".ROTARYWHEEL." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_ROTARYWHEEL;
	}
	else if( boost::iequals( arg, L".RUNAROUNDCOILLOOP." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_RUNAROUNDCOILLOOP;
	}
	else if( boost::iequals( arg, L".HEATPIPE." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_HEATPIPE;
	}
	else if( boost::iequals( arg, L".TWINTOWERENTHALPYRECOVERYLOOPS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_TWINTOWERENTHALPYRECOVERYLOOPS;
	}
	else if( boost::iequals( arg, L".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS;
	}
	else if( boost::iequals( arg, L".THERMOSIPHONCOILTYPEHEATEXCHANGERS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_THERMOSIPHONCOILTYPEHEATEXCHANGERS;
	}
	else if( boost::iequals( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_USERDEFINED;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
