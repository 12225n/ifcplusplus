/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcDiscreteAccessoryTypeEnum.h"

// TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF	(ANCHORPLATE	,BRACKET	,SHOE	,EXPANSION_JOINT_DEVICE	,BIRDPROTECTION	,CABLEARRANGER	,INSULATOR	,LOCK	,TENSIONINGEQUIPMENT	,RAILPAD	,SLIDINGCHAIR	,PANEL_STRENGTHENING	,RAILBRACE	,ELASTIC_CUSHION	,SOUNDABSORPTION	,RAIL_LUBRICATION	,RAIL_MECHANICAL_EQUIPMENT	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcDiscreteAccessoryTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcDiscreteAccessoryTypeEnum> copy_self( new IfcDiscreteAccessoryTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcDiscreteAccessoryTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCDISCRETEACCESSORYTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ANCHORPLATE:	stream << ".ANCHORPLATE."; break;
		case ENUM_BRACKET:	stream << ".BRACKET."; break;
		case ENUM_SHOE:	stream << ".SHOE."; break;
		case ENUM_EXPANSION_JOINT_DEVICE:	stream << ".EXPANSION_JOINT_DEVICE."; break;
		case ENUM_BIRDPROTECTION:	stream << ".BIRDPROTECTION."; break;
		case ENUM_CABLEARRANGER:	stream << ".CABLEARRANGER."; break;
		case ENUM_INSULATOR:	stream << ".INSULATOR."; break;
		case ENUM_LOCK:	stream << ".LOCK."; break;
		case ENUM_TENSIONINGEQUIPMENT:	stream << ".TENSIONINGEQUIPMENT."; break;
		case ENUM_RAILPAD:	stream << ".RAILPAD."; break;
		case ENUM_SLIDINGCHAIR:	stream << ".SLIDINGCHAIR."; break;
		case ENUM_PANEL_STRENGTHENING:	stream << ".PANEL_STRENGTHENING."; break;
		case ENUM_RAILBRACE:	stream << ".RAILBRACE."; break;
		case ENUM_ELASTIC_CUSHION:	stream << ".ELASTIC_CUSHION."; break;
		case ENUM_SOUNDABSORPTION:	stream << ".SOUNDABSORPTION."; break;
		case ENUM_RAIL_LUBRICATION:	stream << ".RAIL_LUBRICATION."; break;
		case ENUM_RAIL_MECHANICAL_EQUIPMENT:	stream << ".RAIL_MECHANICAL_EQUIPMENT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcDiscreteAccessoryTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_ANCHORPLATE:	return L"ANCHORPLATE";
		case ENUM_BRACKET:	return L"BRACKET";
		case ENUM_SHOE:	return L"SHOE";
		case ENUM_EXPANSION_JOINT_DEVICE:	return L"EXPANSION_JOINT_DEVICE";
		case ENUM_BIRDPROTECTION:	return L"BIRDPROTECTION";
		case ENUM_CABLEARRANGER:	return L"CABLEARRANGER";
		case ENUM_INSULATOR:	return L"INSULATOR";
		case ENUM_LOCK:	return L"LOCK";
		case ENUM_TENSIONINGEQUIPMENT:	return L"TENSIONINGEQUIPMENT";
		case ENUM_RAILPAD:	return L"RAILPAD";
		case ENUM_SLIDINGCHAIR:	return L"SLIDINGCHAIR";
		case ENUM_PANEL_STRENGTHENING:	return L"PANEL_STRENGTHENING";
		case ENUM_RAILBRACE:	return L"RAILBRACE";
		case ENUM_ELASTIC_CUSHION:	return L"ELASTIC_CUSHION";
		case ENUM_SOUNDABSORPTION:	return L"SOUNDABSORPTION";
		case ENUM_RAIL_LUBRICATION:	return L"RAIL_LUBRICATION";
		case ENUM_RAIL_MECHANICAL_EQUIPMENT:	return L"RAIL_MECHANICAL_EQUIPMENT";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcDiscreteAccessoryTypeEnum> IfcDiscreteAccessoryTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	shared_ptr<IfcDiscreteAccessoryTypeEnum> type_object( new IfcDiscreteAccessoryTypeEnum() );
	if( std_iequal( arg, L".ANCHORPLATE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_ANCHORPLATE;
	}
	else if( std_iequal( arg, L".BRACKET." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_BRACKET;
	}
	else if( std_iequal( arg, L".SHOE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SHOE;
	}
	else if( std_iequal( arg, L".EXPANSION_JOINT_DEVICE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_EXPANSION_JOINT_DEVICE;
	}
	else if( std_iequal( arg, L".BIRDPROTECTION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_BIRDPROTECTION;
	}
	else if( std_iequal( arg, L".CABLEARRANGER." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_CABLEARRANGER;
	}
	else if( std_iequal( arg, L".INSULATOR." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_INSULATOR;
	}
	else if( std_iequal( arg, L".LOCK." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_LOCK;
	}
	else if( std_iequal( arg, L".TENSIONINGEQUIPMENT." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_TENSIONINGEQUIPMENT;
	}
	else if( std_iequal( arg, L".RAILPAD." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAILPAD;
	}
	else if( std_iequal( arg, L".SLIDINGCHAIR." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SLIDINGCHAIR;
	}
	else if( std_iequal( arg, L".PANEL_STRENGTHENING." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_PANEL_STRENGTHENING;
	}
	else if( std_iequal( arg, L".RAILBRACE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAILBRACE;
	}
	else if( std_iequal( arg, L".ELASTIC_CUSHION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_ELASTIC_CUSHION;
	}
	else if( std_iequal( arg, L".SOUNDABSORPTION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SOUNDABSORPTION;
	}
	else if( std_iequal( arg, L".RAIL_LUBRICATION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAIL_LUBRICATION;
	}
	else if( std_iequal( arg, L".RAIL_MECHANICAL_EQUIPMENT." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAIL_MECHANICAL_EQUIPMENT;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
