/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/IfcPPBasicTypes.h"
#include "ifcpp/model/IfcPPException.h"
#include "ifcpp/IFC4/include/IfcDiscreteAccessoryTypeEnum.h"

// TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF	(ANCHORPLATE	,BRACKET	,SHOE	,USERDEFINED	,NOTDEFINED);
IfcDiscreteAccessoryTypeEnum::IfcDiscreteAccessoryTypeEnum() {}
IfcDiscreteAccessoryTypeEnum::~IfcDiscreteAccessoryTypeEnum() {}
shared_ptr<IfcPPObject> IfcDiscreteAccessoryTypeEnum::getDeepCopy( IfcPPCopyOptions& options )
{
	shared_ptr<IfcDiscreteAccessoryTypeEnum> copy_self( new IfcDiscreteAccessoryTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcDiscreteAccessoryTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCDISCRETEACCESSORYTYPEENUM("; }
	if( m_enum == ENUM_ANCHORPLATE )
	{
		stream << ".ANCHORPLATE.";
	}
	else if( m_enum == ENUM_BRACKET )
	{
		stream << ".BRACKET.";
	}
	else if( m_enum == ENUM_SHOE )
	{
		stream << ".SHOE.";
	}
	else if( m_enum == ENUM_USERDEFINED )
	{
		stream << ".USERDEFINED.";
	}
	else if( m_enum == ENUM_NOTDEFINED )
	{
		stream << ".NOTDEFINED.";
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IfcDiscreteAccessoryTypeEnum> IfcDiscreteAccessoryTypeEnum::createObjectFromSTEP( const std::wstring& arg, const map_t<int,shared_ptr<IfcPPEntity> >& map )
{
	// read TYPE
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	else if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	shared_ptr<IfcDiscreteAccessoryTypeEnum> type_object( new IfcDiscreteAccessoryTypeEnum() );
	if( boost::iequals( arg, L".ANCHORPLATE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_ANCHORPLATE;
	}
	else if( boost::iequals( arg, L".BRACKET." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_BRACKET;
	}
	else if( boost::iequals( arg, L".SHOE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SHOE;
	}
	else if( boost::iequals( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_USERDEFINED;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
