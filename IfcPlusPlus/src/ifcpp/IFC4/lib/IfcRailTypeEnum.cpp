/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcRailTypeEnum.h"

// TYPE IfcRailTypeEnum = ENUMERATION OF	(RACKRAIL	,BLADE	,GUARDRAIL	,STOCKRAIL	,CHECKRAIL	,RAIL	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcRailTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcRailTypeEnum> copy_self( new IfcRailTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcRailTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCRAILTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_RACKRAIL:	stream << ".RACKRAIL."; break;
		case ENUM_BLADE:	stream << ".BLADE."; break;
		case ENUM_GUARDRAIL:	stream << ".GUARDRAIL."; break;
		case ENUM_STOCKRAIL:	stream << ".STOCKRAIL."; break;
		case ENUM_CHECKRAIL:	stream << ".CHECKRAIL."; break;
		case ENUM_RAIL:	stream << ".RAIL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcRailTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_RACKRAIL:	return L"RACKRAIL";
		case ENUM_BLADE:	return L"BLADE";
		case ENUM_GUARDRAIL:	return L"GUARDRAIL";
		case ENUM_STOCKRAIL:	return L"STOCKRAIL";
		case ENUM_CHECKRAIL:	return L"CHECKRAIL";
		case ENUM_RAIL:	return L"RAIL";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcRailTypeEnum> IfcRailTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcRailTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcRailTypeEnum>(); }
	shared_ptr<IfcRailTypeEnum> type_object( new IfcRailTypeEnum() );
	if( std_iequal( arg, L".RACKRAIL." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_RACKRAIL;
	}
	else if( std_iequal( arg, L".BLADE." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_BLADE;
	}
	else if( std_iequal( arg, L".GUARDRAIL." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_GUARDRAIL;
	}
	else if( std_iequal( arg, L".STOCKRAIL." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_STOCKRAIL;
	}
	else if( std_iequal( arg, L".CHECKRAIL." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_CHECKRAIL;
	}
	else if( std_iequal( arg, L".RAIL." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_RAIL;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcRailTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
