/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcCourseTypeEnum.h"

// TYPE IfcCourseTypeEnum = ENUMERATION OF	(ARMOUR	,FILTER	,BALLASTBED	,CORE	,PAVEMENT	,PROTECTION	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcCourseTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcCourseTypeEnum> copy_self( new IfcCourseTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcCourseTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCCOURSETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ARMOUR:	stream << ".ARMOUR."; break;
		case ENUM_FILTER:	stream << ".FILTER."; break;
		case ENUM_BALLASTBED:	stream << ".BALLASTBED."; break;
		case ENUM_CORE:	stream << ".CORE."; break;
		case ENUM_PAVEMENT:	stream << ".PAVEMENT."; break;
		case ENUM_PROTECTION:	stream << ".PROTECTION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcCourseTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_ARMOUR:	return L"ARMOUR";
		case ENUM_FILTER:	return L"FILTER";
		case ENUM_BALLASTBED:	return L"BALLASTBED";
		case ENUM_CORE:	return L"CORE";
		case ENUM_PAVEMENT:	return L"PAVEMENT";
		case ENUM_PROTECTION:	return L"PROTECTION";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcCourseTypeEnum> IfcCourseTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcCourseTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcCourseTypeEnum>(); }
	shared_ptr<IfcCourseTypeEnum> type_object( new IfcCourseTypeEnum() );
	if( std_iequal( arg, L".ARMOUR." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_ARMOUR;
	}
	else if( std_iequal( arg, L".FILTER." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_FILTER;
	}
	else if( std_iequal( arg, L".BALLASTBED." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_BALLASTBED;
	}
	else if( std_iequal( arg, L".CORE." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_CORE;
	}
	else if( std_iequal( arg, L".PAVEMENT." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_PAVEMENT;
	}
	else if( std_iequal( arg, L".PROTECTION." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_PROTECTION;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcCourseTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
