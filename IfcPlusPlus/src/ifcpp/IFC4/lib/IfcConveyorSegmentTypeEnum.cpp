/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcConveyorSegmentTypeEnum.h"

// TYPE IfcConveyorSegmentTypeEnum = ENUMERATION OF	(CHUTECONVEYOR	,BELTCONVEYOR	,SCREWCONVEYOR	,BUCKETCONVEYOR	,USERDEFINED	,NOTDEFINED);
shared_ptr<BuildingObject> IfcConveyorSegmentTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcConveyorSegmentTypeEnum> copy_self( new IfcConveyorSegmentTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcConveyorSegmentTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCCONVEYORSEGMENTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CHUTECONVEYOR:	stream << ".CHUTECONVEYOR."; break;
		case ENUM_BELTCONVEYOR:	stream << ".BELTCONVEYOR."; break;
		case ENUM_SCREWCONVEYOR:	stream << ".SCREWCONVEYOR."; break;
		case ENUM_BUCKETCONVEYOR:	stream << ".BUCKETCONVEYOR."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcConveyorSegmentTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_CHUTECONVEYOR:	return L"CHUTECONVEYOR";
		case ENUM_BELTCONVEYOR:	return L"BELTCONVEYOR";
		case ENUM_SCREWCONVEYOR:	return L"SCREWCONVEYOR";
		case ENUM_BUCKETCONVEYOR:	return L"BUCKETCONVEYOR";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcConveyorSegmentTypeEnum> IfcConveyorSegmentTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcConveyorSegmentTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcConveyorSegmentTypeEnum>(); }
	shared_ptr<IfcConveyorSegmentTypeEnum> type_object( new IfcConveyorSegmentTypeEnum() );
	if( std_iequal( arg, L".CHUTECONVEYOR." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_CHUTECONVEYOR;
	}
	else if( std_iequal( arg, L".BELTCONVEYOR." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_BELTCONVEYOR;
	}
	else if( std_iequal( arg, L".SCREWCONVEYOR." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_SCREWCONVEYOR;
	}
	else if( std_iequal( arg, L".BUCKETCONVEYOR." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_BUCKETCONVEYOR;
	}
	else if( std_iequal( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcConveyorSegmentTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
