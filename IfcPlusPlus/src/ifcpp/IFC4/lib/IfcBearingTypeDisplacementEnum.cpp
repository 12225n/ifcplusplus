/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcBearingTypeDisplacementEnum.h"

// TYPE IfcBearingTypeDisplacementEnum = ENUMERATION OF	(FIXED_MOVEMENT	,GUIDED_LONGITUDINAL	,GUIDED_TRANSVERSAL	,FREE_MOVEMENT	,NOTDEFINED);
shared_ptr<BuildingObject> IfcBearingTypeDisplacementEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcBearingTypeDisplacementEnum> copy_self( new IfcBearingTypeDisplacementEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcBearingTypeDisplacementEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCBEARINGTYPEDISPLACEMENTENUM("; }
	switch( m_enum )
	{
		case ENUM_FIXED_MOVEMENT:	stream << ".FIXED_MOVEMENT."; break;
		case ENUM_GUIDED_LONGITUDINAL:	stream << ".GUIDED_LONGITUDINAL."; break;
		case ENUM_GUIDED_TRANSVERSAL:	stream << ".GUIDED_TRANSVERSAL."; break;
		case ENUM_FREE_MOVEMENT:	stream << ".FREE_MOVEMENT."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcBearingTypeDisplacementEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_FIXED_MOVEMENT:	return L"FIXED_MOVEMENT";
		case ENUM_GUIDED_LONGITUDINAL:	return L"GUIDED_LONGITUDINAL";
		case ENUM_GUIDED_TRANSVERSAL:	return L"GUIDED_TRANSVERSAL";
		case ENUM_FREE_MOVEMENT:	return L"FREE_MOVEMENT";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcBearingTypeDisplacementEnum> IfcBearingTypeDisplacementEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcBearingTypeDisplacementEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcBearingTypeDisplacementEnum>(); }
	shared_ptr<IfcBearingTypeDisplacementEnum> type_object( new IfcBearingTypeDisplacementEnum() );
	if( std_iequal( arg, L".FIXED_MOVEMENT." ) )
	{
		type_object->m_enum = IfcBearingTypeDisplacementEnum::ENUM_FIXED_MOVEMENT;
	}
	else if( std_iequal( arg, L".GUIDED_LONGITUDINAL." ) )
	{
		type_object->m_enum = IfcBearingTypeDisplacementEnum::ENUM_GUIDED_LONGITUDINAL;
	}
	else if( std_iequal( arg, L".GUIDED_TRANSVERSAL." ) )
	{
		type_object->m_enum = IfcBearingTypeDisplacementEnum::ENUM_GUIDED_TRANSVERSAL;
	}
	else if( std_iequal( arg, L".FREE_MOVEMENT." ) )
	{
		type_object->m_enum = IfcBearingTypeDisplacementEnum::ENUM_FREE_MOVEMENT;
	}
	else if( std_iequal( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBearingTypeDisplacementEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
